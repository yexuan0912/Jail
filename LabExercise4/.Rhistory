print((tail(data, input$maxrows)),row.names=FALSE)
options(orig)
})
}
ui <- dashboardPage(
dashboardHeader(title = "Champaign County Jail Population Summary"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dashboard"),
menuItem("Raw Data", tabName = "Rawdata")
)
),
dashboardBody(
tabItems(
tabItem("Dashboard",
fluidRow(
valueBoxOutput("total"),
valueBoxOutput("sentenced"),
valueBoxOutput("unsentenced"),
valueBoxOutput("end-of-sentence")
),
fluidRow(
box(
width = 8, status = "info", solidHeader = TRUE,
title = "Distribution by Location",
#            plotOutput("plot1")
highchartOutput("plot1")
),
box(
width = 4, status = "info",
title = "Change in Jail Population",
tableOutput("table1")
)
),
fluidRow(
valueBoxOutput("bookings"),
valueBoxOutput("transfers"),
valueBoxOutput("releases"),
valueBoxOutput("appts"),
valueBoxOutput("apBond")
)
),
tabItem("Rawdata",
numericInput("maxrows", "Rows to show", 25, min=1, max=dim(data)[1]),
verbatimTextOutput("rawtable"),
downloadButton("downloadCsv", "Download All Data as CSV")
),
tabItem("DailyJailLog",
fluidRow(
valueBoxOutput("Name"),
valueBoxOutput("Race"),
valueBoxOutput("Age"),
valueBoxOutput("RelDate")
))
)
)
)
shinyApp(ui, server)
print(source('ui_Lab Exercise_4.R')$value)
data <- read.csv('djl.all_LE4.csv')
print(source('ui_Lab Exercise_4.R')$value)
print(source('ui_Lab Exercise_4.R')$value)
hc_add_series(data=downtown$popDtn, name = "Downtown Facility", color = "dodgerblue") %>%
server <- function(input, output) {
output$plot1 <- renderHighchart({
downtown <- subset(data, select=c(popDtn, Date))
satellite <- subset(data, select=c(popSat, Date))
highchart() %>%
hc_chart(type="area") %>%
hc_xAxis(categories = unique(as.Date(downtown$Date, "%m/%d/%Y")),
tickmarkPlacement = 'on') %>%
hc_yAxis(title = list(text = "Persons")) %>%
hc_add_series(data=satellite$popSat, name = "Satellite Facility", color="orange") %>%
hc_add_series(data=downtown$popDtn, name = "Downtown Facility", color = "dodgerblue") %>%
hc_add_theme(hc_theme_gridlight())
})
output$total <- renderValueBox({
valueBox(
value = data.sorted$popTot[1],
subtitle = "Total Jail Population Today",
icon = icon("area-chart"),
color = "yellow"
)
})
output$sentenced <- renderValueBox({
valueBox(
value = data.sorted$custSent[1],
subtitle = "Total Inmates Sentenced",
color = "light-blue"
)
icon = icon("balance-scale"),
})
output$unsentenced <- renderValueBox({
valueBox(
value = data.sorted$custUnsent[1],
"Total Inmates Unsentenced",
icon = icon("clock-o"),
color = "aqua"
)
})
output$unsentenced <- renderValueBox({
value = data.sorted$custEndSent[1],
"Total Inmates End of Sentence",
)
})
value = data.sorted$bookings[1],
subtitle = "Total Bookings Yesterday",
icon = icon("book"),
)
})
output$transfers <- renderValueBox({
value = data.sorted$transfers[1],
subtitle = "Total Inmates Transferred",
icon = icon("exchange"),
)
})
output$releases <- renderValueBox({
value = data.sorted$releases[1],
"Total Inmates Released Yesterday",
icon = icon("sign-out"),
color = "aqua"
)
})
output$appts <- renderValueBox({
valueBox(
value = data.sorted$appts[1],
"Total Inmates With Appointments",
icon = icon("sign-out"),
color = "teal"
)
})
output$apBond <- renderValueBox({
valueBox(
value = data.sorted$apBond[1],
"Total Inmates With Appointments/Bond",
icon = icon("sign-out"),
color = "olive"
)
})
output$table1 <- renderTable({
lval <- dim(change.data)[1]
lval <- lval * -1
change.data.display <- change.data[order(-1:lval),]
change.data.display <- head(change.data.display, 11)
}, digits = 1, include.rownames=FALSE)
output$downloadCsv <- downloadHandler(
filename = "djlsummary.all_LE4.csv",
content = function(file) {
write.csv(data, file)
contentType = "text/csv"
)
output$rawtable <- renderPrint({
orig <- options(width = 1000)
options(orig)
})
}
valueBox(
valueBox(
color = "yellow"
color = "blue"
color = "light-blue"
icon = icon("clock-o"),
output$bookings <- renderValueBox({
},
valueBox(
print((tail(data, input$maxrows)),row.names=FALSE)
valueBox(
library(shiny)
library(shinydashboard)
library(highcharter)
library(dplyr)
library(tidyr)
library(rdrop2)
library(lubridate)
library(RCurl)
setwd("C:\\Users\\ygu23\\Desktop\\Academic\\UP494\\LabExercise4")
data <- read.csv('djlsummary.all_LE4.csv')
data$Date <- as.Date(data$custDate, format="%m/%d/%Y")
y.limit <- max(data$popTot)
output.table <- data
Chg.Tot.Pop <- diff(data$popTot)
daye <- lubridate::wday(data$custDate, label=T, abbr = F)
k <- list()
for (i in 1:((length(daye)) - 1)) {
k[i] <- (paste0(daye[i], " to ", daye[i+1], ""))
}
Chg.Tot.Pop.Labels <- as.character(k)
change.data <- cbind.data.frame(Chg.Tot.Pop.Labels, Chg.Tot.Pop)
colnames(change.data ) <- c("Period", "Change in Total Population")
lval <- dim(data)[1]
lval <- lval * -1
data.sorted <- data[order(-1:lval),]
server <- function(input, output) {
output$plot1 <- renderHighchart({
downtown <- subset(data, select=c(popDtn, Date))
satellite <- subset(data, select=c(popSat, Date))
highchart() %>%
hc_chart(type="area") %>%
hc_xAxis(categories = unique(as.Date(downtown$Date, "%m/%d/%Y")),
tickmarkPlacement = 'on') %>%
hc_yAxis(title = list(text = "Persons")) %>%
hc_add_series(data=satellite$popSat, name = "Satellite Facility", color="orange") %>%
hc_add_series(data=downtown$popDtn, name = "Downtown Facility", color = "dodgerblue") %>%
hc_add_theme(hc_theme_gridlight())
})
output$total <- renderValueBox({
valueBox(
value = data.sorted$popTot[1],
subtitle = "Total Jail Population Today",
icon = icon("area-chart"),
color = "yellow"
)
})
output$sentenced <- renderValueBox({
valueBox(
value = data.sorted$custSent[1],
subtitle = "Total Inmates Sentenced",
icon = icon("balance-scale"),
color = "light-blue"
)
})
output$unsentenced <- renderValueBox({
valueBox(
value = data.sorted$custUnsent[1],
"Total Inmates Unsentenced",
icon = icon("clock-o"),
color = "aqua"
)
})
output$unsentenced <- renderValueBox({
valueBox(
value = data.sorted$custEndSent[1],
"Total Inmates End of Sentence",
icon = icon("clock-o"),
color = "blue"
)
})
output$bookings <- renderValueBox({
valueBox(
value = data.sorted$bookings[1],
subtitle = "Total Bookings Yesterday",
icon = icon("book"),
color = "yellow"
)
})
output$transfers <- renderValueBox({
valueBox(
value = data.sorted$transfers[1],
subtitle = "Total Inmates Transferred",
icon = icon("exchange"),
color = "light-blue"
)
})
output$releases <- renderValueBox({
valueBox(
value = data.sorted$releases[1],
"Total Inmates Released Yesterday",
icon = icon("sign-out"),
color = "aqua"
)
})
output$appts <- renderValueBox({
valueBox(
value = data.sorted$appts[1],
"Total Inmates With Appointments",
icon = icon("sign-out"),
color = "teal"
)
})
output$apBond <- renderValueBox({
valueBox(
value = data.sorted$apBond[1],
"Total Inmates With Appointments/Bond",
icon = icon("sign-out"),
color = "olive"
)
})
output$table1 <- renderTable({
lval <- dim(change.data)[1]
lval <- lval * -1
change.data.display <- change.data[order(-1:lval),]
change.data.display <- head(change.data.display, 11)
}, digits = 1, include.rownames=FALSE)
output$downloadCsv <- downloadHandler(
filename = "djlsummary.all_LE4.csv",
content = function(file) {
write.csv(data, file)
},
contentType = "text/csv"
)
output$rawtable <- renderPrint({
orig <- options(width = 1000)
print((tail(data, input$maxrows)),row.names=FALSE)
options(orig)
})
}
ui <- dashboardPage(
dashboardHeader(title = "Champaign County Jail Population Summary"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dashboard"),
menuItem("Raw Data", tabName = "Rawdata")
)
),
dashboardBody(
tabItems(
tabItem("Dashboard",
fluidRow(
valueBoxOutput("total"),
valueBoxOutput("sentenced"),
valueBoxOutput("unsentenced"),
valueBoxOutput("end-of-sentence")
),
fluidRow(
box(
width = 8, status = "info", solidHeader = TRUE,
title = "Distribution by Location",
#            plotOutput("plot1")
highchartOutput("plot1")
),
box(
width = 4, status = "info",
title = "Change in Jail Population",
tableOutput("table1")
)
),
fluidRow(
valueBoxOutput("bookings"),
valueBoxOutput("transfers"),
valueBoxOutput("releases"),
valueBoxOutput("appts"),
valueBoxOutput("apBond")
)
),
tabItem("Rawdata",
numericInput("maxrows", "Rows to show", 25, min=1, max=dim(data)[1]),
verbatimTextOutput("rawtable"),
downloadButton("downloadCsv", "Download All Data as CSV")
)
)
)
)
shinyApp(ui, server)
setwd("C:\\Users\\ygu23\\Desktop\\Academic\\UP494\\LabExercise4")
data <- read.csv('djlsummary.all_LE4.csv')
data$Date <- as.Date(data$custDate, format="%m/%d/%Y")
y.limit <- max(data$popTot)
output.table <- data
Chg.Tot.Pop <- diff(data$popTot)
daye <- lubridate::wday(data$custDate, label=T, abbr = F)
k <- list()
for (i in 1:((length(daye)) - 1)) {
k[i] <- (paste0(daye[i], " to ", daye[i+1], ""))
}
Chg.Tot.Pop.Labels <- as.character(k)
change.data <- cbind.data.frame(Chg.Tot.Pop.Labels, Chg.Tot.Pop)
colnames(change.data ) <- c("Period", "Change in Total Population")
lval <- dim(data)[1]
lval <- lval * -1
data.sorted <- data[order(-1:lval),]
server <- function(input, output) {
output$plot1 <- renderHighchart({
downtown <- subset(data, select=c(popDtn, Date))
satellite <- subset(data, select=c(popSat, Date))
highchart() %>%
hc_chart(type="area") %>%
hc_xAxis(categories = unique(as.Date(downtown$Date, "%m/%d/%Y")),
tickmarkPlacement = 'on') %>%
hc_yAxis(title = list(text = "Persons")) %>%
hc_add_series(data=satellite$popSat, name = "Satellite Facility", color="orange") %>%
hc_add_series(data=downtown$popDtn, name = "Downtown Facility", color = "dodgerblue") %>%
hc_add_theme(hc_theme_gridlight())
})
output$total <- renderValueBox({
valueBox(
value = data.sorted$popTot[1],
subtitle = "Total Jail Population Today",
icon = icon("area-chart"),
color = "yellow"
)
})
output$sentenced <- renderValueBox({
valueBox(
value = data.sorted$custSent[1],
subtitle = "Total Inmates Sentenced",
icon = icon("balance-scale"),
color = "light-blue"
)
})
output$unsentenced <- renderValueBox({
valueBox(
value = data.sorted$custUnsent[1],
"Total Inmates Unsentenced",
icon = icon("clock-o"),
color = "aqua"
)
})
output$unsentenced <- renderValueBox({
valueBox(
value = data.sorted$custEndSent[1],
"Total Inmates End of Sentence",
icon = icon("clock-o"),
color = "blue"
)
})
output$bookings <- renderValueBox({
valueBox(
value = data.sorted$bookings[1],
subtitle = "Total Bookings Yesterday",
icon = icon("book"),
color = "yellow"
)
})
output$transfers <- renderValueBox({
valueBox(
value = data.sorted$transfers[1],
subtitle = "Total Inmates Transferred",
icon = icon("exchange"),
color = "light-blue"
)
})
output$releases <- renderValueBox({
valueBox(
value = data.sorted$releases[1],
"Total Inmates Released Yesterday",
icon = icon("sign-out"),
color = "aqua"
)
})
output$appts <- renderValueBox({
valueBox(
value = data.sorted$appts[1],
"Total Inmates With Appointments",
icon = icon("sign-out"),
color = "teal"
)
})
output$apBond <- renderValueBox({
valueBox(
value = data.sorted$apBond[1],
"Total Inmates With Appointments/Bond",
icon = icon("sign-out"),
color = "olive"
)
})
output$table1 <- renderTable({
lval <- dim(change.data)[1]
lval <- lval * -1
change.data.display <- change.data[order(-1:lval),]
change.data.display <- head(change.data.display, 11)
}, digits = 1, include.rownames=FALSE)
output$downloadCsv <- downloadHandler(
filename = "djlsummary.all_LE4.csv",
content = function(file) {
write.csv(data, file)
},
contentType = "text/csv"
)
output$rawtable <- renderPrint({
orig <- options(width = 1000)
print((tail(data, input$maxrows)),row.names=FALSE)
options(orig)
})
}
ui <- dashboardPage(
dashboardHeader(title = "Champaign County Jail Population Summary"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dashboard"),
menuItem("Raw Data", tabName = "Rawdata")
)
),
dashboardBody(
tabItems(
tabItem("Dashboard",
fluidRow(
valueBoxOutput("total"),
valueBoxOutput("sentenced"),
valueBoxOutput("unsentenced"),
valueBoxOutput("end-of-sentence")
),
fluidRow(
box(
width = 8, status = "info", solidHeader = TRUE,
title = "Distribution by Location",
#            plotOutput("plot1")
highchartOutput("plot1")
),
box(
width = 4, status = "info",
title = "Change in Jail Population",
tableOutput("table1")
)
),
fluidRow(
valueBoxOutput("bookings"),
valueBoxOutput("transfers"),
valueBoxOutput("releases"),
valueBoxOutput("appts"),
valueBoxOutput("apBond")
)
),
tabItem("Rawdata",
numericInput("maxrows", "Rows to show", 25, min=1, max=dim(data)[1]),
verbatimTextOutput("rawtable"),
downloadButton("downloadCsv", "Download All Data as CSV")
)
)
)
)
shinyApp(ui, server)
shinyApp(ui, server)
